module Sumpub_theory

  use int.Int
  use export list.List
  use export list.Mem
  use export list.Length

  type intList = list int

  constant nil : intList
  axiom nil_ax : nil = Nil

  let rec function sumList (l: intList) : int =
    match l with
    | Nil -> 0
    | Cons x r -> x + sumList r
    end

  function hd (l: intList) : int
  axiom hd_cons : forall x:int, r:intList. hd (Cons x r) = x

  function tl (l: intList) : intList
  axiom tl_cons : forall x:int, r:intList. tl (Cons x r) = r

end
