module State
  
  use prelude.Prelude
  use prelude.PreRefperm
  use sumpub_theory.Sumpub_theory
  
  type reftype = 
    | List
    | Node
  
  type heap = {
    mutable value : M.t int ;
    mutable pub : M.t bool ;
    mutable nxt : M.t reference ;
    mutable head : M.t reference ;
    mutable ghost rep : M.t rgn
  }
  
  type state = {
    mutable heap : heap ;
    mutable ghost alloct : M.t reftype
  }invariant { not (null \: alloct) }
  invariant {
    forall p: reference.
      (p \: alloct) ->
        (((alloct[p]) = List) ->
           (((p \: heap.head) /\ (p \: heap.rep)) /\
              ((((heap.head[p]) = null) \/
                  (((heap.head[p]) \: alloct) /\
                     ((alloct[heap.head[p]]) = Node))) /\
                 (forall q: reference.
                    (Rgn.mem q (heap.rep[p])) -> ((q = null) \/ (q \: alloct)))))) }
  invariant {
    forall p: reference.
      (p \: alloct) ->
        (((alloct[p]) = Node) ->
           (((p \: heap.value) /\ ((p \: heap.pub) /\ (p \: heap.nxt))) /\
              (((heap.nxt[p]) = null) \/
                 (((heap.nxt[p]) \: alloct) /\ ((alloct[heap.nxt[p]]) = Node))))) }
   by { heap = (any heap) ;
  alloct = (M.create ()) }
  
  predicate isAllocated (s: state) (p: reference) = p \: s.alloct
  
  predicate isValidRgn (s: state) (r: rgn) =
    forall q: reference. (Rgn.mem q r) -> ((q = null) \/ (q \: s.alloct))
  
  predicate typeofRgn (s: state) (r: rgn) (types: L.list reftype) =
    forall p: reference.
      (Rgn.mem p r) ->
        ((p = null) \/ ((p \: s.alloct) /\ (L.mem (s.alloct[p]) types)))
  
  predicate hasListType (s: state) (p: reference) =
    (p = null) \/ ((p \: s.alloct) /\ ((s.alloct[p]) = List))
  
  predicate hasNodeType (s: state) (p: reference) =
    (p = null) \/ ((p \: s.alloct) /\ ((s.alloct[p]) = Node))
  
  predicate okRefperm (sl: state) (sr: state) (pi: PreRefperm.t) =
    (forall p: reference. (p \: pi.lor) -> (p \: sl.alloct)) /\
      ((forall q: reference. (q \: pi.rol) -> (q \: sr.alloct)) /\
         (forall p: reference, q: reference.
            (p \: pi.lor) ->
              (((pi.lor[p]) = q) -> ((sl.alloct[p]) = (sr.alloct[q])))))
  
  val mk_List (s: state) : reference
    writes { s.alloct }
    writes { s.heap.head }
    writes { s.heap.rep }
    ensures { not (result \: (old s.alloct)) }
    ensures { s.alloct = (M.add result List (old s.alloct)) }
    ensures { forall p: reference.
                (p \: (old s.alloct)) ->
                  ((p \: s.alloct) /\ (((old s.alloct)[p]) = (s.alloct[p]))) }
    ensures { result <> null }
    ensures { hasListType s result }
    ensures { s.heap.head = (M.add result null (old s.heap.head)) }
    ensures { s.heap.rep = (M.add result emptyRgn (old s.heap.rep)) }
  
  val mk_Node (s: state) : reference
    writes { s.alloct }
    writes { s.heap.value }
    writes { s.heap.pub }
    writes { s.heap.nxt }
    ensures { not (result \: (old s.alloct)) }
    ensures { s.alloct = (M.add result Node (old s.alloct)) }
    ensures { forall p: reference.
                (p \: (old s.alloct)) ->
                  ((p \: s.alloct) /\ (((old s.alloct)[p]) = (s.alloct[p]))) }
    ensures { result <> null }
    ensures { hasNodeType s result }
    ensures { s.heap.value = (M.add result 0 (old s.heap.value)) }
    ensures { s.heap.pub = (M.add result false (old s.heap.pub)) }
    ensures { s.heap.nxt = (M.add result null (old s.heap.nxt)) }
  
  function img_value : state -> rgn -> rgn
  
  axiom img_value_ax : forall s: state, r: rgn. (img_value s r) = emptyRgn
  
  function img_rep : state -> rgn -> rgn
  
  axiom img_rep_ax : forall s: state, r: rgn, p: reference.
                       (Rgn.mem p (img_rep s r)) <->
                         (exists q: reference.
                            (q \: s.alloct) /\
                              (((s.alloct[q]) = List) /\
                                 ((Rgn.mem q r) /\ (Rgn.mem p (s.heap.rep[q])))))
  
  function img_pub : state -> rgn -> rgn
  
  axiom img_pub_ax : forall s: state, r: rgn. (img_pub s r) = emptyRgn
  
  function img_nxt : state -> rgn -> rgn
  
  axiom img_nxt_ax : forall s: state, r: rgn, p: reference.
                       (Rgn.mem p (img_nxt s r)) <->
                         (exists q: reference.
                            (q \: s.alloct) /\
                              (((s.alloct[q]) = Node) /\
                                 ((Rgn.mem q r) /\ (p = (s.heap.nxt[q])))))
  
  function img_head : state -> rgn -> rgn
  
  axiom img_head_ax : forall s: state, r: rgn, p: reference.
                        (Rgn.mem p (img_head s r)) <->
                          (exists q: reference.
                             (q \: s.alloct) /\
                               (((s.alloct[q]) = List) /\
                                  ((Rgn.mem q r) /\ (p = (s.heap.head[q])))))
  
  predicate alloc_does_not_shrink (pre: state) (post: state) =
    forall p: reference.
      (p \: pre.alloct) ->
        ((p \: post.alloct) /\ ((pre.alloct[p]) = (post.alloct[p])))
  
  predicate wrs_to_head_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) ->
        (((post.alloct[p]) = List) ->
           ((not (Rgn.mem p r)) -> ((pre.heap.head[p]) = (post.heap.head[p]))))
  
  predicate wrs_to_rep_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) ->
        (((post.alloct[p]) = List) ->
           ((not (Rgn.mem p r)) -> ((pre.heap.rep[p]) = (post.heap.rep[p]))))
  
  predicate wrs_to_value_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) ->
        (((post.alloct[p]) = Node) ->
           ((not (Rgn.mem p r)) -> ((pre.heap.value[p]) = (post.heap.value[p]))))
  
  predicate wrs_to_pub_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) ->
        (((post.alloct[p]) = Node) ->
           ((not (Rgn.mem p r)) -> ((pre.heap.pub[p]) = (post.heap.pub[p]))))
  
  predicate wrs_to_nxt_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) ->
        (((post.alloct[p]) = Node) ->
           ((not (Rgn.mem p r)) -> ((pre.heap.nxt[p]) = (post.heap.nxt[p]))))
  
  predicate agree_value (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasNodeType sl o) ->
              ((Rgn.mem o w) ->
                 ((o \: pi.lor) /\
                    ([@expl:sl(o) ~ sr(pi(o))]
                     (sl.heap.value[o]) = (sr.heap.value[pi.lor[o]]))))))
  
  predicate agree_rep (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasListType sl o) ->
              ((Rgn.mem o w) ->
                 ((o \: pi.lor) /\
                    ([@expl:sl(o) ~ sr(pi(o))]
                     PreRefperm.idRgn
                        pi
                        (sl.heap.rep[o])
                        (sr.heap.rep[pi.lor[o]]))))))
  
  predicate agree_pub (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasNodeType sl o) ->
              ((Rgn.mem o w) ->
                 ((o \: pi.lor) /\
                    ([@expl:sl(o) ~ sr(pi(o))]
                     (sl.heap.pub[o]) = (sr.heap.pub[pi.lor[o]]))))))
  
  predicate agree_nxt (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasNodeType sl o) ->
              ((Rgn.mem o w) ->
                 ((o \: pi.lor) /\
                    ([@expl:sl(o) ~ sr(pi(o))]
                     PreRefperm.idRef
                        pi
                        (sl.heap.nxt[o])
                        (sr.heap.nxt[pi.lor[o]]))))))
  
  predicate agree_head (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasListType sl o) ->
              ((Rgn.mem o w) ->
                 ((o \: pi.lor) /\
                    ([@expl:sl(o) ~ sr(pi(o))]
                     PreRefperm.idRef
                        pi
                        (sl.heap.head[o])
                        (sr.heap.head[pi.lor[o]]))))))
  
  predicate agree_allfields (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (agree_head sl sr pi w) /\
      ((agree_rep sl sr pi w) /\
         ((agree_value sl sr pi w) /\
            ((agree_pub sl sr pi w) /\ (agree_nxt sl sr pi w))))
end

module LIST
  
  use prelude.Prelude
  use State
  use export sumpub_theory.Sumpub_theory
  
  predicate rep_closed (s: state) (xs: reference) =
    (hasListType s xs) ->
      ((xs <> null) ->
         (let hd1 = s.heap.head[xs] in
          let rep2 = s.heap.rep[xs] in
          (typeofRgn s rep2 (L.Cons Node L.Nil)) /\
            ((Rgn.subset (img_nxt s rep2) rep2) /\
               ((Rgn.mem null rep2) /\ (Rgn.mem hd1 rep2)))))
  
  lemma rep_closed_prop : forall s: state.
                            forall xs: reference.
                              (isAllocated s xs) ->
                                ((hasListType s xs) ->
                                   ((rep_closed s xs) ->
                                      (let rep1 = s.heap.rep[xs] in
                                       forall n: reference.
                                         (isAllocated s n) ->
                                           ((hasNodeType s n) ->
                                              ((Rgn.mem n rep1) ->
                                                 (let nxt2 = s.heap.nxt[n] in
                                                  Rgn.mem nxt2 rep1))))))
  
  inductive listpub (s:state) (n:reference) (l:intList) =
  | listpub_nil : forall s. listpub s nullConst Nil
  | listpub_del : forall s:state, n:reference, l:intList.
    n \: s.alloct ->
    hasNodeType s n ->
    s.heap.pub[n] = false ->
    listpub s (s.heap.nxt[n]) l ->
    listpub s n l
  | listpub_pub : forall s:state, n:reference, l:intList.
    n \: s.alloct ->
    hasNodeType s n ->
    s.heap.pub[n] = true ->
    listpub s (s.heap.nxt[n]) l ->
    listpub s n (Cons s.heap.value[n] l)



  
  predicate listpubL (s: state) (xs: reference) (ls: intList) =
    (hasListType s xs) ->
      ((xs <> null) -> (let hd1 = s.heap.head[xs] in
                        listpub s hd1 ls))
  
  lemma listpub_nxt : forall s: state.
                        forall n: reference, xs: intList.
                          (isAllocated s n) ->
                            ((hasNodeType s n) ->
                               ((listpub s n xs) ->
                                  (let nxt1 = s.heap.nxt[n] in
                                   exists xs': intList. listpub s nxt1 xs')))
  
  lemma listpub_unique : forall s: state.
                           forall xs: intList, n: reference.
                             (isAllocated s n) ->
                               ((hasNodeType s n) ->
                                  ((listpub s n xs) ->
                                     (forall ys: intList.
                                        (listpub s n ys) -> (xs = ys))))
  
  lemma listpub_nexists : forall s: state.
                            forall n: reference.
                              (isAllocated s n) ->
                                ((hasNodeType s n) ->
                                   (((s.heap.nxt[n]) = n) ->
                                      (not (exists ls: intList. listpub s n ls))))
  
  val sum (s: state) (self: reference) : int
    requires { hasListType s self }
    requires { self <> null }
    requires { exists ls: intList. listpubL s self ls }
    requires { rep_closed s self }
end

module List
  
  use prelude.Prelude
  use State
  use LIST
  
  let sum (s: state) (self: reference) : int
    requires { hasListType s self }
    requires { self <> null }
    requires { exists ls: intList. LIST.listpubL s self ls }
    requires { LIST.rep_closed s self } diverges =
    label INIT in
      let result = ref 0 in
      (let self = ref self in
       (let ghost xs = ref (any intList) in
        (((assume { LIST.listpubL s (! self) (! xs) });
          (let p = ref null in
           (((assert { hasNodeType s (! p) });
             (assert {
                ((Rgn.mem
                     (! self)
                     ((Rgn.union (singleton (! self)) (s.heap.rep[! self])) at INIT)) \/
                   ((not (Rgn.mem (! self) (s.alloct.M.domain at INIT))) \/
                      ((! self) = null))) /\
                  true });
             (p := ([@expl:p := self.head] s.heap.head[! self]));
             (result := ([@expl:result := 0] 0));
             (while (! p) <>. null do
                invariant {
                  [@expl:locals type invariant]
                  (hasNodeType s (! p)) /\ (hasListType s (! self)) }
                invariant { alloc_does_not_shrink (old s) s }
                invariant { LIST.listpub s (! p) (! xs) }
                invariant {
                  let rep1 = s.heap.rep[! self] in
                  Rgn.mem (! p) rep1 }
                invariant { LIST.rep_closed s (! self) }
                let pub2 = ref false in
                (((assert {
                     ((Rgn.mem
                          (! p)
                          ((Rgn.union (singleton (! self)) (s.heap.rep[! self])) at INIT)) \/
                        ((not (Rgn.mem (! p) (s.alloct.M.domain at INIT))) \/
                           ((! p) = null))) /\
                       true });
                  (pub2 := ([@expl:pub := p.pub] s.heap.pub[! p]));
                  (if (! pub2)
                   then (let v = ref 0 in
                         (((assert {
                              ((Rgn.mem
                                   (! p)
                                   ((Rgn.union
                                        (singleton (! self))
                                        (s.heap.rep[! self])) at INIT)) \/
                                 ((not (Rgn.mem
                                           (! p)
                                           (s.alloct.M.domain at INIT))) \/
                                    ((! p) = null))) /\
                                true });
                           (v := ([@expl:v := p.value] s.heap.value[! p]));
                           (result
                              := ([@expl:result := result + v]
                                  (! result) + (! v)));
                           (xs := ([@expl:xs := tl(xs)] LIST.tl (! xs))))))
                   else ());
                  (assert {
                     ((Rgn.mem
                          (! p)
                          ((Rgn.union (singleton (! self)) (s.heap.rep[! self])) at INIT)) \/
                        ((not (Rgn.mem (! p) (s.alloct.M.domain at INIT))) \/
                           ((! p) = null))) /\
                       true });
                  (p := ([@expl:p := p.nxt] s.heap.nxt[! p]))))
              done);
             (! result))))))))
end

module BiList
  
  use prelude.Prelude
  use State
  use List
  use export sumpub_theory.Sumpub_theory
  
  let sum (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_self: reference) (r_self: reference) : 
    (int,
     int)
    requires { hasListType l_s l_self }
    requires { l_self <> null }
    requires { hasListType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi }
    requires { exists l_ls: intList, r_ls: intList.
                 ((List.LIST.listpubL l_s l_self l_ls) /\
                    (List.LIST.listpubL r_s r_self r_ls)) /\
                   (l_ls = r_ls) }
    ensures { okRefperm l_s r_s pi }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result)
              end } diverges =
    label INIT in
      let l_result = ref 0 in
      (let r_result = ref 0 in
       (let l_self = ref l_self in
        (let r_self = ref r_self in
         (let ghost l_xs = ref (any intList) in
          (let ghost r_xs = ref (any intList) in
           (((assume {
                (List.LIST.listpubL l_s (! l_self) (! l_xs)) /\
                  (List.LIST.listpubL r_s (! r_self) (! r_xs)) });
             (let l_p = ref null in
              (let r_p = ref null in
               (((((l_p := ([@expl:p := self.head] l_s.heap.head[! l_self]));
                   (r_p := ([@expl:p := self.head] r_s.heap.head[! r_self]))));
                 (((l_result := ([@expl:result := 0] 0));
                   (r_result := ([@expl:result := 0] 0))));
                 (while ((! l_p) <>. null)  || ((! r_p) <>. null) do
                    invariant {
                      [@expl:locals type invariant left]
                      (hasNodeType l_s (! l_p)) /\ (hasListType l_s (! l_self)) }
                    invariant {
                      [@expl:locals type invariant right]
                      (hasNodeType r_s (! r_p)) /\ (hasListType r_s (! r_self)) }
                    invariant { okRefperm l_s r_s pi }
                    invariant {
                      (List.LIST.listpub l_s (! l_p) (! l_xs)) /\
                        (List.LIST.listpub r_s (! r_p) (! r_xs)) }
                    invariant { (! l_result) = (! r_result) }
                    invariant { (! l_xs) = (! r_xs) }
                    invariant {
                      [@expl:alignment condition]
                      (((! l_p) <> null) /\ ((l_s.heap.pub[! l_p]) = false)) \/
                        ((((! r_p) <> null) /\ ((r_s.heap.pub[! r_p]) = false)) \/
                           ((((! l_p) <> null) /\ ((! r_p) <> null)) \/
                              ((not ((! l_p) <> null)) /\
                                 (not ((! r_p) <> null))))) }
                    if ([@expl:Left step]
                        ((! l_p) <>. null)
                         && (eqBool (l_s.heap.pub[! l_p]) false))
                    then (let pub3 = ref false in
                          (((pub3 := ([@expl:pub := p.pub] l_s.heap.pub[! l_p]));
                            (if (! pub3)
                             then (let v = ref 0 in
                                   (((v
                                        := ([@expl:v := p.value]
                                            l_s.heap.value[! l_p]));
                                     (assert {
                                        (! v) = (List.LIST.hd (! l_xs)) });
                                     (l_result
                                        := ([@expl:result := result + v]
                                            (! l_result) + (! v)));
                                     (l_xs
                                        := ([@expl:xs := tl(xs)]
                                            List.LIST.tl (! l_xs))))))
                             else ());
                            (l_p := ([@expl:p := p.nxt] l_s.heap.nxt[! l_p])))))
                    else (if ([@expl:Right step]
                              ((! r_p) <>. null)
                               && (eqBool (r_s.heap.pub[! r_p]) false))
                          then (let pub4 = ref false in
                                (((pub4
                                     := ([@expl:pub := p.pub]
                                         r_s.heap.pub[! r_p]));
                                  (if (! pub4)
                                   then (let v = ref 0 in
                                         (((v
                                              := ([@expl:v := p.value]
                                                  r_s.heap.value[! r_p]));
                                           (assert {
                                              (! v) = (List.LIST.hd (! r_xs)) });
                                           (r_result
                                              := ([@expl:result := result + v]
                                                  (! r_result) + (! v)));
                                           (r_xs
                                              := ([@expl:xs := tl(xs)]
                                                  List.LIST.tl (! r_xs))))))
                                   else ());
                                  (r_p
                                     := ([@expl:p := p.nxt] r_s.heap.nxt[! r_p])))))
                          else (let l_pub = ref false in
                                (let r_pub = ref false in
                                 (((((l_pub
                                        := ([@expl:pub := p.pub]
                                            l_s.heap.pub[! l_p]));
                                     (r_pub
                                        := ([@expl:pub := p.pub]
                                            r_s.heap.pub[! r_p]))));
                                   (((if (! l_pub)
                                      then (let v = ref 0 in
                                            (((v
                                                 := ([@expl:v := p.value]
                                                     l_s.heap.value[! l_p]));
                                              (assert {
                                                 (! v)
                                                    = (List.LIST.hd (! l_xs)) });
                                              (l_result
                                                 := ([@expl:result := result + v]
                                                     (! l_result) + (! v)));
                                              (l_xs
                                                 := ([@expl:xs := tl(xs)]
                                                     List.LIST.tl (! l_xs))))))
                                      else ());
                                     (l_p
                                        := ([@expl:p := p.nxt]
                                            l_s.heap.nxt[! l_p]))));
                                   (if (! r_pub)
                                    then (let v = ref 0 in
                                          (((v
                                               := ([@expl:v := p.value]
                                                   r_s.heap.value[! r_p]));
                                            (assert {
                                               (! v) = (List.LIST.hd (! r_xs)) });
                                            (r_result
                                               := ([@expl:result := result + v]
                                                   (! r_result) + (! v)));
                                            (r_xs
                                               := ([@expl:xs := tl(xs)]
                                                   List.LIST.tl (! r_xs))))))
                                    else ());
                                   (r_p
                                      := ([@expl:p := p.nxt]
                                          r_s.heap.nxt[! r_p])))))))
                  done);
                 (! l_result, ! r_result))))))))))))
  
  let sum2 (l_s: state) (r_s: state) (pi5: PreRefperm.t) (l_self: reference) (r_self: reference) : 
    (int,
     int)
    requires { hasListType l_s l_self }
    requires { l_self <> null }
    requires { hasListType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi5 }
    requires { exists l_ls: intList, r_ls: intList.
                 ((List.LIST.listpubL l_s l_self l_ls) /\
                    (List.LIST.listpubL r_s r_self r_ls)) /\
                   (l_ls = r_ls) }
    ensures { okRefperm l_s r_s pi5 }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result)
              end } diverges =
    label INIT in
      let l_result = ref 0 in
      (let r_result = ref 0 in
       (let l_self = ref l_self in
        (let r_self = ref r_self in
         (let ghost l_xs = ref (any intList) in
          (let ghost r_xs = ref (any intList) in
           (((assume {
                (List.LIST.listpubL l_s (! l_self) (! l_xs)) /\
                  (List.LIST.listpubL r_s (! r_self) (! r_xs)) });
             (let l_p = ref null in
              (let r_p = ref null in
               (((((l_p := ([@expl:p := self.head] l_s.heap.head[! l_self]));
                   (r_p := ([@expl:p := self.head] r_s.heap.head[! r_self]))));
                 (((l_result := ([@expl:result := 0] 0));
                   (r_result := ([@expl:result := 0] 0))));
                 (while ((! l_p) <>. null)  || ((! r_p) <>. null) do
                    invariant {
                      [@expl:locals type invariant left]
                      (hasNodeType l_s (! l_p)) /\ (hasListType l_s (! l_self)) }
                    invariant {
                      [@expl:locals type invariant right]
                      (hasNodeType r_s (! r_p)) /\ (hasListType r_s (! r_self)) }
                    invariant { okRefperm l_s r_s pi5 }
                    invariant {
                      (List.LIST.listpub l_s (! l_p) (! l_xs)) /\
                        (List.LIST.listpub r_s (! r_p) (! r_xs)) }
                    invariant { (! l_result) = (! r_result) }
                    invariant { (! l_xs) = (! r_xs) }
                    invariant {
                      [@expl:alignment condition]
                      (((! l_p) <> null) /\
                         (((l_s.heap.pub[! l_p]) = false) /\
                            (((! r_p) <> null) ->
                               ((r_s.heap.pub[! r_p]) = true)))) \/
                        ((((! r_p) <> null) /\
                            (((r_s.heap.pub[! r_p]) = false) /\
                               (((! l_p) <> null) ->
                                  ((l_s.heap.pub[! l_p]) = true)))) \/
                           ((((! l_p) <> null) /\ ((! r_p) <> null)) \/
                              ((not ((! l_p) <> null)) /\
                                 (not ((! r_p) <> null))))) }
                    if ([@expl:Left step]
                        ((! l_p) <>. null)
                         &&
                          ((eqBool (l_s.heap.pub[! l_p]) false)
                            &&
                             ((not ((! r_p) <>. null))
                               || (eqBool (r_s.heap.pub[! r_p]) true))))
                    then (let pub6 = ref false in
                          (((pub6 := ([@expl:pub := p.pub] l_s.heap.pub[! l_p]));
                            (if (! pub6)
                             then (let v = ref 0 in
                                   (((v
                                        := ([@expl:v := p.value]
                                            l_s.heap.value[! l_p]));
                                     (assert {
                                        (! v) = (List.LIST.hd (! l_xs)) });
                                     (l_result
                                        := ([@expl:result := result + v]
                                            (! l_result) + (! v)));
                                     (l_xs
                                        := ([@expl:xs := tl(xs)]
                                            List.LIST.tl (! l_xs))))))
                             else ());
                            (l_p := ([@expl:p := p.nxt] l_s.heap.nxt[! l_p])))))
                    else (if ([@expl:Right step]
                              ((! r_p) <>. null)
                               &&
                                ((eqBool (r_s.heap.pub[! r_p]) false)
                                  &&
                                   ((not ((! l_p) <>. null))
                                     || (eqBool (l_s.heap.pub[! l_p]) true))))
                          then (let pub7 = ref false in
                                (((pub7
                                     := ([@expl:pub := p.pub]
                                         r_s.heap.pub[! r_p]));
                                  (if (! pub7)
                                   then (let v = ref 0 in
                                         (((v
                                              := ([@expl:v := p.value]
                                                  r_s.heap.value[! r_p]));
                                           (assert {
                                              (! v) = (List.LIST.hd (! r_xs)) });
                                           (r_result
                                              := ([@expl:result := result + v]
                                                  (! r_result) + (! v)));
                                           (r_xs
                                              := ([@expl:xs := tl(xs)]
                                                  List.LIST.tl (! r_xs))))))
                                   else ());
                                  (r_p
                                     := ([@expl:p := p.nxt] r_s.heap.nxt[! r_p])))))
                          else (let l_pub = ref false in
                                (let r_pub = ref false in
                                 (((((l_pub
                                        := ([@expl:pub := p.pub]
                                            l_s.heap.pub[! l_p]));
                                     (r_pub
                                        := ([@expl:pub := p.pub]
                                            r_s.heap.pub[! r_p]))));
                                   (((if (! l_pub)
                                      then (let v = ref 0 in
                                            (((v
                                                 := ([@expl:v := p.value]
                                                     l_s.heap.value[! l_p]));
                                              (assert {
                                                 (! v)
                                                    = (List.LIST.hd (! l_xs)) });
                                              (l_result
                                                 := ([@expl:result := result + v]
                                                     (! l_result) + (! v)));
                                              (l_xs
                                                 := ([@expl:xs := tl(xs)]
                                                     List.LIST.tl (! l_xs))))))
                                      else ());
                                     (l_p
                                        := ([@expl:p := p.nxt]
                                            l_s.heap.nxt[! l_p]))));
                                   (if (! r_pub)
                                    then (let v = ref 0 in
                                          (((v
                                               := ([@expl:v := p.value]
                                                   r_s.heap.value[! r_p]));
                                            (assert {
                                               (! v) = (List.LIST.hd (! r_xs)) });
                                            (r_result
                                               := ([@expl:result := result + v]
                                                   (! r_result) + (! v)));
                                            (r_xs
                                               := ([@expl:xs := tl(xs)]
                                                   List.LIST.tl (! r_xs))))))
                                    else ());
                                   (r_p
                                      := ([@expl:p := p.nxt]
                                          r_s.heap.nxt[! r_p])))))))
                  done);
                 (! l_result, ! r_result))))))))))))
end

module BiList_biinterface
  
  use prelude.Prelude
  use State
  use List
  use export sumpub_theory.Sumpub_theory
  
  val sum (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_self: reference) (r_self: reference) : 
    (int,
     int)
    requires { hasListType l_s l_self }
    requires { l_self <> null }
    requires { hasListType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi }
    requires { exists l_ls: intList, r_ls: intList.
                 ((List.LIST.listpubL l_s l_self l_ls) /\
                    (List.LIST.listpubL r_s r_self r_ls)) /\
                   (l_ls = r_ls) }
    ensures { okRefperm l_s r_s pi }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result)
              end }
end

module MAIN
  
  use prelude.Prelude
  use State
end

