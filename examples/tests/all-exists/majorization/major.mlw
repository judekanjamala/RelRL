module State
  
  use prelude.Prelude
  use prelude.PreRefperm
  
  type reftype = {
    
  }
  
  type heap = {
    
  }
  
  type state = {
    mutable heap : heap ;
    mutable ghost alloct : M.t reftype
  }invariant { not (null \: alloct) }
   by { heap = (any heap) ;
  alloct = (M.create ()) }
  
  predicate isAllocated (s: state) (p: reference) = p \: s.alloct
  
  predicate isValidRgn (s: state) (r: rgn) = forall q: reference. (Rgn.mem q r) -> ((q = null) \/ (q \: s.alloct))
  
  predicate typeofRgn (s: state) (r: rgn) (types: L.list reftype) =
    forall p: reference. (Rgn.mem p r) -> ((p = null) \/ ((p \: s.alloct) /\ (L.mem (s.alloct[p]) types)))
  
  predicate okRefperm (sl: state) (sr: state) (pi: PreRefperm.t) =
    (forall p: reference. (p \: pi.lor) -> (p \: sl.alloct)) /\
      ((forall q: reference. (q \: pi.rol) -> (q \: sr.alloct)) /\
         (forall p: reference, q: reference. (p \: pi.lor) -> (((pi.lor[p]) = q) -> ((sl.alloct[p]) = (sr.alloct[q])))))
  
  predicate alloc_does_not_shrink (pre: state) (post: state) =
    forall p: reference. (p \: pre.alloct) -> ((p \: post.alloct) /\ ((pre.alloct[p]) = (post.alloct[p])))
  
  predicate agree_allfields (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn)
end
module MAIN
  
  use prelude.Prelude
  use State
end

module I
  use prelude.Prelude
  use State
  
  val m (s: state) (x: int) : int requires { x > 4 } ensures { result > 0 }
end

module P0
  
  use prelude.Prelude
  use State
  use I
  
  let m (s: state) (x: int) : int diverges
    requires { x > 4 }
    ensures { result > 0 } =
    label INIT in
      let result = ref 0 in
      (let x = ref x in
       (let y = ref 0 in
        (let z = ref 0 in
         (let w = ref 0 in
          (((y := ([@expl:y := x] ! x));
            (z := ([@expl:z := 120] 120));
            (w := ([@expl:w := 0] 0));
            (while not ((! y) = 5) do
               invariant { alloc_does_not_shrink (old s) s }
               invariant { ((! z) > 0) /\ ((! y) > 4) }
               ((if ((mod (! w) 2) = 0) then (((z := ([@expl:z := z * y] (! z) * (! y)));
                                               (y := ([@expl:y := y - 1] (! y) - 1))))
                 else ());
                (w := ([@expl:w := w + 1] (! w) + 1)))
             done);
            (result := ([@expl:result := z] ! z));
            (! result)))))))
end

module P1
  
  use prelude.Prelude
  use State
  use I
  
  let m (s: state) (x: int) : int diverges
    requires { x > 4 }
    ensures { result > 0 } =
    label INIT in
      let result = ref 0 in
      (let x = ref x in
       (let y = ref 0 in
        (let z = ref 0 in
         (let w = ref 0 in
          (((y := ([@expl:y := x] ! x));
            (z := ([@expl:z := 32] 32));
            (w := ([@expl:w := 0] 0));
            (while not ((! y) = 5) do
               invariant { alloc_does_not_shrink (old s) s }
               invariant { ((! z) > 0) /\ ((! y) > 4) }
               ((if ((mod (! w) 3) = 0) then (((z := ([@expl:z := z * 2] (! z) * 2));
                                               (y := ([@expl:y := y - 1] (! y) - 1)))) else ());
                (w := ([@expl:w := w + 1] (! w) + 1)))
             done);
            (result := ([@expl:result := z] ! z));
            (! result)))))))
end

module PREL
  
  use prelude.Prelude
  use State
  use P0
  use P1
  
  let m (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_x: int) (r_x: int) : 
    (int, int) diverges
    requires { okRefperm l_s r_s pi }
    requires { (l_x > 3) /\ (r_x > 3) }
    requires { l_x = r_x }
    ensures { okRefperm l_s r_s pi }
    ensures { let (lres,rres) = result in lres > rres } =
    label INIT in
      let l_result = ref 0 in
      (let r_result = ref 0 in
       (let l_x = ref l_x in
        (let r_x = ref r_x in
         (let l_y = ref 0 in
          (let r_y = ref 0 in
           (let l_z = ref 0 in
            (let r_z = ref 0 in
             (let l_w = ref 0 in
              (let r_w = ref 0 in
               (((((l_y := ([@expl:y := x] ! l_x));
                   (r_y := ([@expl:y := x] ! r_x))));
                 (((l_z := ([@expl:z := 120] 24));
                   (r_z := ([@expl:z := 32] 16))));
                 (((l_w := ([@expl:w := 0] 0));
                   (r_w := ([@expl:w := 0] 0))));
                   assert { !l_y > 3 /\ !r_y > 3 };
                 (while (not ((! l_y) = 4))  || (not ((! r_y) = 4)) do
                    invariant { okRefperm l_s r_s pi }
                    invariant { (! l_y) = (! r_y) }
                    invariant { !l_y > 3 }
                    invariant { !r_z > 0 }
                    invariant { !l_z > !r_z }
                    invariant {
                      [@expl:alignment condition]
                      (((! l_y) <> 4) /\ ((mod (! l_w) 2) <> 0)) \/
                        ((((! r_y) <> 4) /\ ((mod (! r_w) 3) <> 0)) \/
                           ((((! l_y) <> 4) /\ ((! r_y) <> 4)) \/ ((not ((! l_y) <> 4)) /\ (not ((! r_y) <> 4))))) }
                    if ([@expl:Left step] (not ((! l_y) = 4))  && (not ((mod (! l_w) 2) = 0)))
                    then (((if ((mod (! l_w) 2) = 0)
                            then (((l_z := ([@expl:z := z * y] (! l_z) * (! l_y)));
                                   (l_y := ([@expl:y := y - 1] (! l_y) - 1))))
                            else ());
                           (l_w := ([@expl:w := w + 1] (! l_w) + 1))))
                    else (if ([@expl:Right step] (not ((! r_y) = 4))  && (not ((mod (! r_w) 3) = 0)))
                          then (((if ((mod (! r_w) 3) = 0)
                                  then (((r_z := ([@expl:z := z * 2] (! r_z) * 2));
                                         (r_y := ([@expl:y := y - 1] (! r_y) - 1))))
                                  else ());
                                 (r_w := ([@expl:w := w + 1] (! r_w) + 1))))
                          else ((((([@expl:guard agreement] assert { ((mod (! l_w) 2) = 0) = ((mod (! r_w) 3) = 0) });
                                   (if ((mod (! l_w) 2) = 0)
                                    then (((((l_z := ([@expl:z := z * y] (! l_z) * (! l_y)));
                                             (r_z := ([@expl:z := z * 2] (! r_z) * 2))));
                                           (l_y := ([@expl:y := y - 1] (! l_y) - 1));
                                           (r_y := ([@expl:y := y - 1] (! r_y) - 1))))
                                    else ((();
                                           ())))));
                                 (l_w := ([@expl:w := w + 1] (! l_w) + 1));
                                 (r_w := ([@expl:w := w + 1] (! r_w) + 1)))))
                  done);
                 (l_result := ([@expl:result := z] ! l_z));
                 (r_result := ([@expl:result := z] ! r_z));
                 (! l_result, ! r_result))))))))))))
end

